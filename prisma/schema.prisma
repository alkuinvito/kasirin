generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  phone         BigInt?       @unique
  address       String?
  gender        String?
  dob           DateTime?
  role          String?
  active        Boolean       @default(true)
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Variant {
  id      String         @id @default(cuid())
  name    String
  price   Int            @default(0)
  groupId String
  orders  OrderVariant[]
  group   VariantGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model VariantGroup {
  id       String    @id @default(cuid())
  name     String
  required Boolean?  @default(false)
  items    Variant[]
  products Product[] @relation("ProductToVariant")
}

model Product {
  id         String         @id @default(cuid())
  name       String
  price      Int
  image      String
  stock      Int            @default(0)
  permalink  String         @unique
  categoryId String
  orders     Order[]
  category   Category       @relation(fields: [categoryId], references: [id])
  variants   VariantGroup[] @relation("ProductToVariant")

  @@index([name])
}

model OrderVariant {
  id        String   @id @default(cuid())
  orderId   String
  variantId String?
  name      String
  price     Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

model Order {
  id            String         @id @default(cuid())
  transactionId String
  productId     String
  price         Int
  quantity      Int
  notes         String?
  product       Product        @relation(fields: [productId], references: [id])
  transaction   Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  variants      OrderVariant[]
}

model Fee {
  id           String   @id @default(cuid())
  type         String
  name         String
  amount       Float
}

model Transaction {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime @default(now())
  orders   Order[]
  user     User     @relation(fields: [userId], references: [id])
  status   String   @default("expired")
  subtotal Int
  total    Int
  method   String?
}
