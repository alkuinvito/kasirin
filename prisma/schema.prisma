datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id    Int    @id @default(autoincrement())
  email String @unique
  role  String
}

model Category {
  id String @id @default(cuid())
  name String
  products Product[]
}

model Product {
  id    String @id @default(cuid())
  name  String
  price BigInt
  image String
  order Order?
  categoryId String @unique
  category Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
}

model Order {
  id            String @id @default(cuid())
  productId     String @unique
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  quantity      Int
}

model Transaction {
  id     String @id @default(cuid())
  userId String
  date   DateTime @default(now())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}