generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  phone         BigInt?       @unique
  address       String?       @db.Text
  gender        String?
  dob           DateTime?
  role          String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id    Int    @id @default(autoincrement())
  email String @unique
  role  String
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Variant {
  id       String       @id @default(cuid())
  name     String
  price    Int          @default(0)
  groudId  String
  group    VariantGroup @relation(fields: [groudId], references: [id], onDelete: Cascade)
}

model VariantGroup {
  id       String    @id @default(cuid())
  name     String
  required Boolean?  @default(false)
  items    Variant[]
  products Product[] @relation("ProductToVariant")
}

model Product {
  id         String         @id @default(cuid())
  name       String
  price      Int
  image      String
  stock      Int            @default(0)
  categoryId String
  category   Category       @relation(fields: [categoryId], references: [id])
  orders     Order[]        @relation("OrderToProduct")
  variants   VariantGroup[] @relation("ProductToVariant")

  @@index(name)
}

model Order {
  id            String      @id @default(cuid())
  transactionId String
  quantity      Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  products      Product[]   @relation("OrderToProduct")
}

model Transaction {
  id     String   @id @default(cuid())
  userId String
  date   DateTime @default(now())
  orders Order[]
  user   User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
}
